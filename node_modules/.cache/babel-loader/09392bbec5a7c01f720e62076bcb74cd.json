{"ast":null,"code":"import React from'react';import ReactDOM from'react-dom';import{Provider}from'react-redux';import AppRouter from'./routers/AppRouter';import configureStore from'./store/configureStore';import{setCoins}from'./actions/coins';import{setFavorites}from'./actions/favorites';import*as serviceWorker from'./serviceWorker';import'./styles/styles.scss';var store=configureStore();// populate favorites list\nvar favorites=JSON.parse(localStorage.getItem('cryptodashFavorites'));if(favorites){store.dispatch(setFavorites(favorites));}// populate coin list\nvar cc=require('cryptocompare');cc.setApiKey(process.env.REACT_APP_CRYPTO_COMPARE_API_KEY);var coins=[];var coinKeys=[];cc.coinList().then(function(coinList){coinKeys=Object.keys(coinList.Data);for(var i=0;i<coinKeys.length;i++){var coin={'symbol':coinList.Data[coinKeys[i]].Symbol,'name':coinList.Data[coinKeys[i]].CoinName,'sortOrder':coinList.Data[coinKeys[i]].SortOrder,'imageUrl':coinList.Data[coinKeys[i]].ImageUrl,'isTrading':coinList.Data[coinKeys[i]].IsTrading,'price':0,'changePctDay':0,'mktCap':0};coins.push(coin);}store.dispatch(setCoins(coins));// const processedData = fetchPrices([], [], coinKeys, coins, 'USD', 200, (processedData) => {\n//   // if (coins) { dispatch({ type: 'POPULATE_COINS', coins: processedData }) }\n//   console.log('processed', processedData)\n// })\n}).catch(console.error);var jsx=/*#__PURE__*/React.createElement(React.StrictMode,null,/*#__PURE__*/React.createElement(Provider,{store:store},/*#__PURE__*/React.createElement(AppRouter,null)));ReactDOM.render(jsx,document.getElementById('root'));serviceWorker.unregister();","map":{"version":3,"sources":["/home/kali/demo/src/index.js"],"names":["React","ReactDOM","Provider","AppRouter","configureStore","setCoins","setFavorites","serviceWorker","store","favorites","JSON","parse","localStorage","getItem","dispatch","cc","require","setApiKey","process","env","REACT_APP_CRYPTO_COMPARE_API_KEY","coins","coinKeys","coinList","then","Object","keys","Data","i","length","coin","Symbol","CoinName","SortOrder","ImageUrl","IsTrading","push","catch","console","error","jsx","render","document","getElementById","unregister"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CACA,OAASC,QAAT,KAAyB,aAAzB,CACA,MAAOC,CAAAA,SAAP,KAAsB,qBAAtB,CACA,MAAOC,CAAAA,cAAP,KAA2B,wBAA3B,CACA,OAASC,QAAT,KAAyB,iBAAzB,CACA,OAASC,YAAT,KAA6B,qBAA7B,CACA,MAAO,GAAKC,CAAAA,aAAZ,KAA+B,iBAA/B,CACA,MAAO,sBAAP,CAEA,GAAMC,CAAAA,KAAK,CAAGJ,cAAc,EAA5B,CAEA;AACA,GAAMK,CAAAA,SAAS,CAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,qBAArB,CAAX,CAAlB,CACA,GAAGJ,SAAH,CAAc,CACZD,KAAK,CAACM,QAAN,CAAeR,YAAY,CAACG,SAAD,CAA3B,EACD,CAED;AACA,GAAMM,CAAAA,EAAE,CAAGC,OAAO,CAAC,eAAD,CAAlB,CACAD,EAAE,CAACE,SAAH,CAAaC,OAAO,CAACC,GAAR,CAAYC,gCAAzB,EACA,GAAIC,CAAAA,KAAK,CAAG,EAAZ,CACA,GAAIC,CAAAA,QAAQ,CAAG,EAAf,CACAP,EAAE,CAACQ,QAAH,GAAcC,IAAd,CAAmB,SAACD,QAAD,CAAc,CAC/BD,QAAQ,CAAGG,MAAM,CAACC,IAAP,CAAYH,QAAQ,CAACI,IAArB,CAAX,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGN,QAAQ,CAACO,MAA7B,CAAqCD,CAAC,EAAtC,CAA0C,CACxC,GAAME,CAAAA,IAAI,CAAG,CACX,SAAUP,QAAQ,CAACI,IAAT,CAAcL,QAAQ,CAACM,CAAD,CAAtB,EAA2BG,MAD1B,CAEX,OAAQR,QAAQ,CAACI,IAAT,CAAcL,QAAQ,CAACM,CAAD,CAAtB,EAA2BI,QAFxB,CAGX,YAAaT,QAAQ,CAACI,IAAT,CAAcL,QAAQ,CAACM,CAAD,CAAtB,EAA2BK,SAH7B,CAIX,WAAYV,QAAQ,CAACI,IAAT,CAAcL,QAAQ,CAACM,CAAD,CAAtB,EAA2BM,QAJ5B,CAKX,YAAaX,QAAQ,CAACI,IAAT,CAAcL,QAAQ,CAACM,CAAD,CAAtB,EAA2BO,SAL7B,CAMX,QAAS,CANE,CAOX,eAAgB,CAPL,CAQX,SAAU,CARC,CAAb,CAUAd,KAAK,CAACe,IAAN,CAAWN,IAAX,EACD,CACDtB,KAAK,CAACM,QAAN,CAAeT,QAAQ,CAACgB,KAAD,CAAvB,EACA;AACA;AACA;AACA;AACD,CApBD,EAoBGgB,KApBH,CAoBSC,OAAO,CAACC,KApBjB,EAsBA,GAAMC,CAAAA,GAAG,cACP,oBAAC,KAAD,CAAO,UAAP,mBACE,oBAAC,QAAD,EAAU,KAAK,CAAEhC,KAAjB,eACE,oBAAC,SAAD,MADF,CADF,CADF,CAQAP,QAAQ,CAACwC,MAAT,CAAgBD,GAAhB,CAAqBE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAArB,EAEApC,aAAa,CAACqC,UAAd","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport AppRouter from './routers/AppRouter'\nimport configureStore from './store/configureStore'\nimport { setCoins } from './actions/coins'\nimport { setFavorites } from './actions/favorites'\nimport * as serviceWorker from './serviceWorker'\nimport './styles/styles.scss'\n\nconst store = configureStore()\n\n// populate favorites list\nconst favorites = JSON.parse(localStorage.getItem('cryptodashFavorites'))\nif(favorites) {\n  store.dispatch(setFavorites(favorites))\n}\n\n// populate coin list\nconst cc = require('cryptocompare')\ncc.setApiKey(process.env.REACT_APP_CRYPTO_COMPARE_API_KEY)\nlet coins = []\nlet coinKeys = []\ncc.coinList().then((coinList) => {\n  coinKeys = Object.keys(coinList.Data)\n  for (let i = 0; i < coinKeys.length; i++) {\n    const coin = {\n      'symbol': coinList.Data[coinKeys[i]].Symbol,\n      'name': coinList.Data[coinKeys[i]].CoinName,\n      'sortOrder': coinList.Data[coinKeys[i]].SortOrder,\n      'imageUrl': coinList.Data[coinKeys[i]].ImageUrl,\n      'isTrading': coinList.Data[coinKeys[i]].IsTrading,\n      'price': 0,\n      'changePctDay': 0,\n      'mktCap': 0\n    }\n    coins.push(coin)\n  }\n  store.dispatch(setCoins(coins))\n  // const processedData = fetchPrices([], [], coinKeys, coins, 'USD', 200, (processedData) => {\n  //   // if (coins) { dispatch({ type: 'POPULATE_COINS', coins: processedData }) }\n  //   console.log('processed', processedData)\n  // })\n}).catch(console.error)\n\nconst jsx = (\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppRouter />\n    </Provider>\n  </React.StrictMode>\n)\n\nReactDOM.render(jsx, document.getElementById('root'));\n\nserviceWorker.unregister()\n"]},"metadata":{},"sourceType":"module"}